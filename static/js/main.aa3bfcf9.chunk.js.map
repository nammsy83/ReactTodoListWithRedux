{"version":3,"sources":["actions/action.types.js","actions/action-creator.js","components/create-todo.jsx","components/todo-list.jsx","App.js","serviceWorker.js","reducers/todo-reducer.js","reducers/filter-reducer.js","reducers/root-reducer.js","index.js"],"names":["TODO_ACTION_TYPES","ADD_TODO","TOGGLE_TODO","DELETE_TODO","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","SET_VISIBILITY_FILTER","todoId","addTodo","text","type","id","toggleTodo","deleteTodo","setVisibilityFilter","filter","CreateTodo","props","handleChange","e","setState","todotext","target","value","handleSubmit","preventDefault","state","console","log","className","this","placeholder","onChange","onClick","Component","connect","dispatch","bindActionCreators","TodoList","style","marginTop","visibilityFilter","todos","length","scope","map","todo","key","textDecoration","completed","color","fontSize","marginRight","role","getVisibleTodos","t","Error","App","Boolean","window","location","hostname","match","initialState","todoReducer","action","numindex","parseInt","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa3bfcf9.chunk.js","sourcesContent":["const TODO_ACTION_TYPES = {\n    ADD_TODO: 'ADD_TODO',\n    TOGGLE_TODO: 'TOGGLE_TODO',\n    DELETE_TODO: 'DELETE_TODO',\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE',\n    SET_VISIBILITY_FILTER: 'SET_VISIBILITY_FILTER'\n}\n\nexport default TODO_ACTION_TYPES;","import TODO_ACTION_TYPES from './action.types';\n\nlet todoId = 2;\n\nexport const addTodo = text => ({\n    type: TODO_ACTION_TYPES.ADD_TODO,\n    id: todoId++,\n    text\n})\n\nexport const toggleTodo = (id) => ({\n    type: TODO_ACTION_TYPES.TOGGLE_TODO,\n    id\n})\n\nexport const deleteTodo = (id) => ({\n    type: TODO_ACTION_TYPES.DELETE_TODO,\n    id\n})\n\n\nexport const setVisibilityFilter = filter => ({\n    type: TODO_ACTION_TYPES.SET_VISIBILITY_FILTER,\n    filter\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions/action-creator';\nimport { bindActionCreators } from 'redux'\n\n\nclass CreateTodo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            todotext: ''\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({ todotext: e.target.value })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.todotext);\n        this.setState({ todotext: ' ' })\n\n        console.log(this.state.todotext)\n    }\n\n    render() {\n        return (\n            <div className=\"form-group row\">\n                <div className=\"col-sm-10\">\n                    <input type=\"text\"\n                        value={this.state.todotext}\n                        className=\"form-control\"\n                        placeholder=\"add todo here\"\n                        onChange={this.handleChange} />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-success\"\n                        onClick={this.handleSubmit}\n                    >\n                        Add\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        addTodo\n    }, dispatch)\n}\n\n\nexport default connect(null, mapDispatchToProps)(CreateTodo);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { toggleTodo, deleteTodo, setVisibilityFilter } from '../actions/action-creator';\nimport { bindActionCreators } from 'redux'\nimport TODO_ACTION_TYPES from '../actions/action.types';\n\n\nclass TodoList extends Component {\n    render() {\n\n        return (\n            <div className=\"col-lg-10 offset-lg-1 col-md-10 col-sm-12 col-xs-12\">\n                <nav style={{ marginTop: \"60px\" }}>\n                    <ol className=\"breadcrumb\">\n                        <li\n                            className={\"breadcrumb-item \" + (this.props.visibilityFilter === TODO_ACTION_TYPES.SHOW_ALL ? 'active' : '')}\n                            onClick={() => this.props.setVisibilityFilter(TODO_ACTION_TYPES.SHOW_ALL)}\n                        >\n                            All\n            </li>\n                        <li\n                            className={\"breadcrumb-item \" + (this.props.visibilityFilter === TODO_ACTION_TYPES.SHOW_COMPLETED ? 'active' : '')}\n                            onClick={() => this.props.setVisibilityFilter(TODO_ACTION_TYPES.SHOW_COMPLETED)}\n                        >\n                            Completed\n            </li>\n                        <li\n                            className={\"breadcrumb-item \" + (this.props.visibilityFilter === TODO_ACTION_TYPES.SHOW_ACTIVE ? 'active' : '')}\n                            onClick={() => this.props.setVisibilityFilter(TODO_ACTION_TYPES.SHOW_ACTIVE)}\n                        >\n                            Active\n            </li>\n                    </ol>\n                </nav>\n                {this.props.todos.length !== 0 ? (\n                    <table\n                        style={{ marginTop: \"60px\" }}\n                        className=\"table table-hover table-dark\"\n                    >\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Todos</th>\n                                <th scope=\"col\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.props.todos.map(todo => (\n                                <tr key={todo.id}>\n                                    <td\n\n                                        style={{\n                                            textDecoration: todo.completed ? \"line-through\" : \"none\"\n                                        }}\n                                    >\n                                        {todo.text} {todo.completed === true ? \"(completed)\" : \"\"}\n                                    </td>\n                                    <td>\n                                        <span\n                                            className=\"fas fa-minus-circle\"\n                                            onClick={() => this.props.toggleTodo(todo.id)}\n                                            style={{\n                                                color: \"white\",\n                                                fontSize: \"20pt\",\n                                                marginRight: \"20px\"\n                                            }}\n                                        />\n                                        <span\n                                            className=\"fas fa-check-circle\"\n                                            onClick={() => this.props.deleteTodo(todo.id)}\n                                            style={{ color: \"white\", fontSize: \"20pt\" }}\n                                        />\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                ) : (\n                        <div\n                            style={{ marginTop: \"50px\" }}\n                            className=\"col-lg-10 col-md-10 col-xs-12 col-sm-12 offset-lg-1\"\n                        >\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                Todo List is empty or Filter results show no results\n            </div>\n                        </div>\n                    )}{\" \"}\n\n            </div>\n        )\n    }\n}\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case TODO_ACTION_TYPES.SHOW_ALL:\n            return todos;\n        case TODO_ACTION_TYPES.SHOW_COMPLETED:\n            return todos.filter(t => t.completed)\n        case TODO_ACTION_TYPES.SHOW_ACTIVE:\n            return todos.filter(t => !t.completed)\n        default:\n            throw new Error(\"Unknown filter: \" + filter);\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        todos: getVisibleTodos(state.todos, state.visibilityFilter),\n        visibilityFilter: state.visibilityFilter\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        toggleTodo,\n        deleteTodo,\n        setVisibilityFilter\n    }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { Component } from 'react';\nimport './App.css';\nimport CreateTodo from './components/create-todo';\nimport TodoList from './components/todo-list';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-10 offset-lg-2 col-md-10 col-sm-12 col-xs-12\">\n              <CreateTodo />\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import TODO_ACTION_TYPES from '../actions/action.types';\n\nconst initialState = [];\n\n\nconst todoReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case TODO_ACTION_TYPES.ADD_TODO:\n            return [\n                ...state, {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n        case TODO_ACTION_TYPES.TOGGLE_TODO:\n            return state.map(todo =>\n                (todo.id === action.id) ?\n                    { ...todo, completed: !todo.completed } :\n                    todo\n            )\n        case TODO_ACTION_TYPES.DELETE_TODO:\n            const numindex = parseInt(action.id)\n            return state.filter(todo =>\n                todo.id !== numindex\n            )\n        default:\n            return state;\n    }\n}\n\n\nexport default todoReducer;","import TODO_ACTION_TYPES from '../actions/action.types';\n\nconst visibilityFilter = (state = TODO_ACTION_TYPES.SHOW_ALL, action) => {\n    switch (action.type) {\n        case TODO_ACTION_TYPES.SET_VISIBILITY_FILTER:\n            return action.filter;\n\n        default: return state\n    }\n}\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todoReducer from './todo-reducer';\nimport visibilityFilter from './filter-reducer';\n\nexport default combineReducers({\n    todos: todoReducer,\n    visibilityFilter\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/root-reducer';\n\nconst store = createStore(\n    rootReducer\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}